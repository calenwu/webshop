# Generated by Django 3.2.3 on 2021-05-15 12:37

import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django_extensions.db.fields
import modelcluster.contrib.taggit
import modelcluster.fields
import wagtail.contrib.routable_page.models
import wagtail.core.blocks
import wagtail.core.fields
import wagtail.images.blocks


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('wagtailcore', '0062_comment_models_and_pagesubscription'),
        ('wagtailimages', '0023_add_choose_permissions'),
        ('taggit', '0003_taggeditem_add_unique_index'),
    ]

    operations = [
        migrations.CreateModel(
            name='ProductCategory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(db_index=True, max_length=127, unique=True)),
                ('name_de', models.CharField(db_index=True, max_length=127, null=True, unique=True)),
                ('name_en', models.CharField(db_index=True, max_length=127, null=True, unique=True)),
                ('slug', django_extensions.db.fields.AutoSlugField(blank=True, editable=False, populate_from='name')),
                ('image', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='+', to='wagtailimages.image')),
            ],
            options={
                'verbose_name': 'product category',
                'verbose_name_plural': 'product categories',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='ProductColor',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sort_order', models.IntegerField(blank=True, editable=False, null=True)),
                ('color', models.CharField(db_index=True, max_length=63)),
                ('slug', django_extensions.db.fields.AutoSlugField(blank=True, editable=False, populate_from=['product', 'color'])),
                ('hex', models.CharField(max_length=7)),
                ('hex2', models.CharField(blank=True, max_length=7, null=True)),
                ('image', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='+', to='wagtailimages.image')),
            ],
            options={
                'ordering': ('-product_id',),
            },
        ),
        migrations.CreateModel(
            name='ProductListingsPage',
            fields=[
                ('page_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='wagtailcore.page')),
                ('content', wagtail.core.fields.StreamField([('banner', wagtail.core.blocks.StructBlock([('image', wagtail.images.blocks.ImageChooserBlock(help_text='Image', required=True)), ('text', wagtail.core.blocks.CharBlock(help_text='Title', required=True)), ('text_color', wagtail.core.blocks.CharBlock(help_text='#ffffff', required=True))]))], blank=True, null=True)),
            ],
            options={
                'abstract': False,
            },
            bases=(wagtail.contrib.routable_page.models.RoutablePageMixin, 'wagtailcore.page'),
        ),
        migrations.CreateModel(
            name='ProductPage',
            fields=[
                ('page_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='wagtailcore.page')),
                ('details', wagtail.core.fields.RichTextField(blank=True, null=True)),
                ('details_de', wagtail.core.fields.RichTextField(blank=True, null=True)),
                ('details_en', wagtail.core.fields.RichTextField(blank=True, null=True)),
                ('price', models.IntegerField(validators=[django.core.validators.MinValueValidator(0)])),
                ('sale_price', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0)])),
                ('weight', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0)])),
                ('show_color', models.BooleanField(default=True)),
                ('show_size', models.BooleanField(default=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('reference_buttons', wagtail.core.fields.StreamField([('reference_button', wagtail.core.blocks.StructBlock([('text', wagtail.core.blocks.CharBlock(help_text='Text', required=True)), ('url', wagtail.core.blocks.URLBlock(help_text='Text', required=True)), ('text_color', wagtail.core.blocks.CharBlock(help_text='#ffffff', required=True)), ('button_bg_color', wagtail.core.blocks.CharBlock(help_text='#ffffff', required=True)), ('border_color', wagtail.core.blocks.CharBlock(help_text='#ffffff', required=False)), ('font_awesome_class', wagtail.core.blocks.CharBlock(help_text='fal fa-nice', required=False))]))], blank=True, null=True)),
                ('content', wagtail.core.fields.StreamField([('title_with_text', wagtail.core.blocks.StructBlock([('title', wagtail.core.blocks.CharBlock(help_text='Title', required=True)), ('text', wagtail.core.blocks.CharBlock(help_text='Text', required=True))])), ('image_left_text_right', wagtail.core.blocks.StructBlock([('title', wagtail.core.blocks.CharBlock(help_text='Title', required=True)), ('text', wagtail.core.blocks.CharBlock(help_text='Text', required=True)), ('image', wagtail.images.blocks.ImageChooserBlock(help_text='Image', required=True))])), ('image_right_text_left', wagtail.core.blocks.StructBlock([('title', wagtail.core.blocks.CharBlock(help_text='Title', required=True)), ('text', wagtail.core.blocks.CharBlock(help_text='Text', required=True)), ('image', wagtail.images.blocks.ImageChooserBlock(help_text='image', required=True))]))], blank=True, null=True)),
                ('content_de', wagtail.core.fields.StreamField([('title_with_text', wagtail.core.blocks.StructBlock([('title', wagtail.core.blocks.CharBlock(help_text='Title', required=True)), ('text', wagtail.core.blocks.CharBlock(help_text='Text', required=True))])), ('image_left_text_right', wagtail.core.blocks.StructBlock([('title', wagtail.core.blocks.CharBlock(help_text='Title', required=True)), ('text', wagtail.core.blocks.CharBlock(help_text='Text', required=True)), ('image', wagtail.images.blocks.ImageChooserBlock(help_text='Image', required=True))])), ('image_right_text_left', wagtail.core.blocks.StructBlock([('title', wagtail.core.blocks.CharBlock(help_text='Title', required=True)), ('text', wagtail.core.blocks.CharBlock(help_text='Text', required=True)), ('image', wagtail.images.blocks.ImageChooserBlock(help_text='image', required=True))]))], blank=True, null=True)),
                ('content_en', wagtail.core.fields.StreamField([('title_with_text', wagtail.core.blocks.StructBlock([('title', wagtail.core.blocks.CharBlock(help_text='Title', required=True)), ('text', wagtail.core.blocks.CharBlock(help_text='Text', required=True))])), ('image_left_text_right', wagtail.core.blocks.StructBlock([('title', wagtail.core.blocks.CharBlock(help_text='Title', required=True)), ('text', wagtail.core.blocks.CharBlock(help_text='Text', required=True)), ('image', wagtail.images.blocks.ImageChooserBlock(help_text='Image', required=True))])), ('image_right_text_left', wagtail.core.blocks.StructBlock([('title', wagtail.core.blocks.CharBlock(help_text='Title', required=True)), ('text', wagtail.core.blocks.CharBlock(help_text='Text', required=True)), ('image', wagtail.images.blocks.ImageChooserBlock(help_text='image', required=True))]))], blank=True, null=True)),
                ('image', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='wagtailimages.image')),
                ('product_category', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='shop.productcategory')),
            ],
            options={
                'abstract': False,
            },
            bases=(wagtail.contrib.routable_page.models.RoutablePageMixin, 'wagtailcore.page'),
        ),
        migrations.CreateModel(
            name='Setting',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('key', models.CharField(db_index=True, max_length=255, unique=True)),
                ('value', models.CharField(db_index=True, max_length=255)),
            ],
            options={
                'verbose_name': 'Setting',
                'verbose_name_plural': 'Settings',
                'ordering': ['key'],
            },
        ),
        migrations.CreateModel(
            name='SizeCategory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(db_index=True, max_length=127, unique=True)),
                ('name_de', models.CharField(db_index=True, max_length=127, null=True, unique=True)),
                ('name_en', models.CharField(db_index=True, max_length=127, null=True, unique=True)),
                ('slug', django_extensions.db.fields.AutoSlugField(blank=True, editable=False, populate_from='name')),
            ],
            options={
                'verbose_name': 'Product size category',
                'verbose_name_plural': 'Product size categories',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Tag',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content_object', modelcluster.fields.ParentalKey(on_delete=django.db.models.deletion.CASCADE, related_name='product_tags', to='shop.productpage')),
                ('tag', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='shop_tag_items', to='taggit.tag')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ProductSize',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(db_index=True, max_length=31, unique=True)),
                ('name_de', models.CharField(db_index=True, max_length=31, null=True, unique=True)),
                ('name_en', models.CharField(db_index=True, max_length=31, null=True, unique=True)),
                ('slug', django_extensions.db.fields.AutoSlugField(blank=True, editable=False, populate_from='name')),
                ('order_sequence', models.IntegerField()),
                ('size_categories', models.ManyToManyField(related_name='product_sizes', to='shop.SizeCategory')),
            ],
            options={
                'verbose_name': 'product size',
                'verbose_name_plural': 'product sizes',
                'ordering': ['order_sequence'],
            },
        ),
        migrations.AddField(
            model_name='productpage',
            name='size_category',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='shop.sizecategory'),
        ),
        migrations.AddField(
            model_name='productpage',
            name='tags',
            field=modelcluster.contrib.taggit.ClusterTaggableManager(blank=True, help_text='A comma-separated list of tags.', through='shop.Tag', to='taggit.Tag', verbose_name='Tags'),
        ),
        migrations.CreateModel(
            name='ProductImages',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sort_order', models.IntegerField(blank=True, editable=False, null=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('description_de', models.TextField(blank=True, null=True)),
                ('description_en', models.TextField(blank=True, null=True)),
                ('image', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='wagtailimages.image')),
                ('page', modelcluster.fields.ParentalKey(on_delete=django.db.models.deletion.CASCADE, related_name='product_images', to='shop.productpage')),
            ],
            options={
                'ordering': ('sort_order',),
            },
        ),
        migrations.CreateModel(
            name='ProductColorImage',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sort_order', models.IntegerField(blank=True, editable=False, null=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('description_de', models.TextField(blank=True, null=True)),
                ('description_en', models.TextField(blank=True, null=True)),
                ('image', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='+', to='wagtailimages.image')),
                ('product_color', modelcluster.fields.ParentalKey(on_delete=django.db.models.deletion.CASCADE, related_name='product_color_images', to='shop.productcolor')),
            ],
            options={
                'ordering': ['sort_order'],
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='productcolor',
            name='product',
            field=modelcluster.fields.ParentalKey(on_delete=django.db.models.deletion.CASCADE, related_name='product_colors', to='shop.productpage'),
        ),
        migrations.CreateModel(
            name='ProductColorQuantity',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sort_order', models.IntegerField(blank=True, editable=False, null=True)),
                ('sku', models.CharField(blank=True, max_length=127, null=True)),
                ('quantity', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0)])),
                ('product_color', modelcluster.fields.ParentalKey(on_delete=django.db.models.deletion.CASCADE, related_name='product_color_quantities', to='shop.productcolor')),
                ('product_size', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='shop.productsize')),
            ],
            options={
                'unique_together': {('product_color', 'product_size')},
            },
        ),
        migrations.AlterUniqueTogether(
            name='productcolor',
            unique_together={('product', 'color')},
        ),
    ]
